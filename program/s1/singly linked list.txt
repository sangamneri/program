#include <stdio.h>
#include<malloc.h>
struct node
{
    int data;
    struct node*next;
};
struct node *create(struct node*head)
{
    struct node *nw=NULL,*ptr=NULL;
    int i,x,n;
    printf("Enter the number of values: ");
    scanf("%d",&n);
    printf("Enter the actual value: ");
    for(i=0;i<n;i++)
    {
        nw=(struct node*)malloc(sizeof(struct node));
        scanf("%d",&x);
        nw->data=x;
        nw->next=NULL;
        if(head==NULL)
        {
            head=ptr=nw;
        }
        else
        {
            ptr->next=nw;
            ptr=ptr->next;
        }
    }
    return(head);
}
void display(struct node*head)
{
    struct node *ptr=NULL;
    ptr=head;
    do
    {
        printf("%d\t",ptr->data);
        ptr=ptr->next;
    }
    while(ptr!=NULL);
}
struct node *insert(struct node*head)
{
    struct node *nw=NULL,*ptr=NULL;
    int x,pos,count=1;
    printf("Enter the position to insert the number: ");
    scanf("%d",&pos);
    printf("Enter the value to insert: ");
    scanf("%d",&x);
    nw=(struct node*)malloc(sizeof(struct node));
    nw->data=x;
    nw->next=NULL;
    if(pos==1)
    {
        nw->next=head;
        nw=head;
    }
    else
    {
        ptr=head;
        while(count!=pos-1)
        {
            ptr=ptr->next;
            count++;
        }
        if(ptr!=NULL)
        {
            nw->next=ptr->next;
            ptr->next=nw;
        }
        else
        {
            printf("position out of order");
        }
    }
    return(head);
    }
    struct node *delete(struct node*head)
    {
        struct node *temp=NULL,*ptr=NULL;
        int pos,count=1;
        printf("Enter the position to delete value: ");
        scanf("%d",&pos);
        if(pos==1)
        {
            temp=head;
            printf("The deleted elemrnt is %d",temp->data);
            head=head->next;
            free(temp);
        }
        else
        {
            ptr=head;
            while(count!=pos-1)
            {
                ptr=ptr->next;
                count++;
            }
            if(ptr->next!=NULL)
            {
                temp=ptr->next;
                printf("The deleted elements are %d",temp->data);
                ptr->next=temp->next;
                free(temp);
                
            }
            else
            {
                printf("position out of order");
            }
            
        }
        return(head);
    }
    void search(struct node*head)
    {
        struct node *ptr=NULL;
        int flag=0,e;
        printf("Enter the element to search: ");
        scanf("%d",&e);
        ptr=head;
        while(ptr!=NULL)
        {
            if(ptr->data==e)
            {
                flag=1;
                break;
            }
            else
            {
                ptr=ptr->next;
            }
        }
        if(flag==1)
        {
            printf("Element is available");
        }
        else
        {
            printf("Element is not present");
        }
    }
    int count(struct node*head)
    {
        struct node *ptr=NULL;
        int count=0;
        ptr=head;
        while(ptr!=NULL)
        {
            count++;
            ptr=ptr->next;
        }
        printf("\nThe total elements in linked list are %d",count);
    }
void main()
{
    int ch,q=0;
    struct node *create();
    void display();
    struct node *insert();
    void search();
    struct node *delete();
    struct node *head=NULL;
    do
    {
        printf("\n1.create\n2.display\n3.insert\n4.search\n5.delete\n6.count\n7.exit");
        printf("\nEnter your choice: ");
        scanf("%d",&ch);
        switch(ch)
        {
            case 1:head=create(head);
            break;
            case 2:display(head);
            break;
            case 3:head=insert(head);
            break;
            case 4:search(head);
            break;
            case 5:head=delete(head);
            break;
            case 6:count(head);
            break;
            case 7:q==1;
        }
    }while(q==0);
        }